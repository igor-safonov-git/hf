#!/usr/bin/env python3
"""
Test 20 most challenging HR analytics queries to validate the retry mechanism
"""
import asyncio
import json
import httpx
from datetime import datetime
import sys

# 20 most challenging queries that test edge cases
CHALLENGING_QUERIES = [
    # Complex time-based with multiple filters
    "–°—Ä–∞–≤–Ω–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ 3 –º–µ—Å—è—Ü–∞–º–∏ –ø–æ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –≤ –Ω–∞–π–º",
    "–ö–∞–∫–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º 1 –æ—Ç–∫—Ä—ã—Ç—ã –¥–æ–ª—å—à–µ 60 –¥–Ω–µ–π –∏ –∏–º–µ—é—Ç –º–µ–Ω—å—à–µ 5 –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤?",
    
    # Queries that might trigger "logs" entity
    "–ö–∞–∫–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Å—Ç–∞–≤–ª—è—é—Ç –º–µ–Ω–µ–¥–∂–µ—Ä—ã –ø–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º?",
    "–ü–æ–∫–∞–∂–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–µ–π—Å—Ç–≤–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ",
    "–ö–∞–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é?",
    
    # Complex aggregations
    "–†–∞—Å—Å—á–∏—Ç–∞–π —Å—Ä–µ–¥–Ω—é—é —Å–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞ –≤–æ—Ä–æ–Ω–∫–∏ –Ω–∞–π–º–∞",
    "–ö–∞–∫–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –æ—Ç–≤–∞–ª–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º?",
    
    # Salary-based complex queries
    "–ü–æ–∫–∞–∂–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã–º –æ–∂–∏–¥–∞–Ω–∏—è–º —Å —à–∞–≥–æ–º 50000 –¥–ª—è senior –ø–æ–∑–∏—Ü–∏–π",
    "–ö–∞–Ω–¥–∏–¥–∞—Ç—ã –∏–∑ –∫–∞–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Ö–æ—Ç—è—Ç –±–æ–ª—å—à–µ –¥–µ–Ω–µ–≥ –∏ –ø–æ—á–µ–º—É?",
    
    # Russian terminology edge cases
    "–°–∫–æ–ª—å–∫–æ —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Å—Ç–∞—Ç—É—Å–µ '–¥—É–º–∞–µ—Ç –Ω–∞–¥ –æ—Ñ—Ñ–µ—Ä–æ–º' –ø–æ —Ö–∞–Ω—Ç–µ—Ä–∞–º?",
    "–ü–æ–∫–∞–∂–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏—é –æ—Ç —Å–∫—Ä–∏–Ω–∏–Ω–≥–∞ –¥–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–∞–º",
    
    # Queries using "stay_duration" incorrectly
    "–ö–∞–∫–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∑–∞–∫—Ä—ã–≤–∞—é—Ç—Å—è –±—ã—Å—Ç—Ä–µ–µ –≤—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É—è stay_duration?",
    "–ü–æ–∫–∞–∂–∏ —Å—Ä–µ–¥–Ω–µ–µ stay_duration –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –æ—Ç–¥–µ–ª–∞–º",
    
    # Complex filtering with rejections
    "–ü–æ—á–µ–º—É –æ—Ç–≤–∞–ª–∏–≤–∞—é—Ç—Å—è –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä–≤—å—é –≤ IT –æ—Ç–¥–µ–ª–µ?",
    "–ê–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω –æ—Ç–∫–∞–∑–æ–≤ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π –≤—ã—à–µ 200000",
    
    # Distribution queries that need group_by
    "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º",
    "–¢–æ–ø –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤",
    
    # Edge cases with multiple entities
    "–°—Ä–∞–≤–Ω–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–≤ –ø–æ –∑–∞–∫—Ä—ã—Ç—ã–º –≤–∞–∫–∞–Ω—Å–∏—è–º –∏ –ø—Ä–∏–Ω—è—Ç—ã–º –æ—Ñ—Ñ–µ—Ä–∞–º",
    "–ö–∞–∫–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏ –≤—Ä–µ–º–µ–Ω–µ–º –∑–∞–∫—Ä—ã—Ç–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏?",
    
    # Very complex business logic
    "–û—Ü–µ–Ω–∏ ROI –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Å —É—á–µ—Ç–æ–º —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è, –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –∏ —Å—Ä–µ–¥–Ω–µ–π –∑–∞—Ä–ø–ª–∞—Ç—ã –Ω–∞–Ω—è—Ç—ã—Ö"
]


async def test_query(client: httpx.AsyncClient, query: str, index: int) -> dict:
    """Test a single query and return results"""
    print(f"\n{'='*60}")
    print(f"Query {index + 1}/20: {query}")
    print('='*60)
    
    start_time = datetime.now()
    
    try:
        response = await client.post(
            "http://localhost:8001/chat-retry",
            json={
                "message": query,
                "model": "deepseek",
                "show_debug": True,
                "max_retries": 2,
                "temperature": 0.1,
                "use_real_data": False
            },
            timeout=60.0
        )
        
        end_time = datetime.now()
        duration = (end_time - start_time).total_seconds()
        
        if response.status_code == 200:
            result = response.json()
            
            # Extract key information
            attempts = result.get('attempts', 0)
            success = result.get('validation_success', False)
            conversation_log = result.get('conversation_log', [])
            
            # Check for retries
            had_retry = attempts > 1
            retry_reason = ""
            error_feedback = ""
            
            if had_retry:
                for i, log in enumerate(conversation_log):
                    if "‚ùå Validation Failed:" in log:
                        retry_reason = log.split("‚ùå Validation Failed:")[-1].strip()
                    if "üîß Error Feedback:" in log:
                        # Get the actual feedback message
                        if i + 1 < len(conversation_log):
                            error_feedback = conversation_log[i].split("üîß Error Feedback:")[-1].strip()
            
            # Print conversation flow
            print("\nüìù Conversation Flow:")
            for log in conversation_log:
                if any(marker in log for marker in ['üîµ', '‚ùå', '‚úÖ', 'üîß', 'üîÑ', 'üíÄ']):
                    # Truncate long messages
                    if len(log) > 150:
                        print(f"  {log[:150]}...")
                    else:
                        print(f"  {log}")
            
            # Extract final response
            final_response = {}
            if 'response' in result:
                try:
                    final_response = json.loads(result['response'])
                except:
                    final_response = {"error": "Failed to parse response"}
            
            # Summary
            status = "‚úÖ SUCCESS" if success else "‚ùå FAILED"
            if had_retry:
                status += f" (after {attempts} attempts)"
            
            print(f"\n{status} | Duration: {duration:.2f}s")
            
            if had_retry:
                print(f"\nüîÑ Retry Details:")
                print(f"  - Reason: {retry_reason[:200]}...")
                if error_feedback:
                    print(f"  - Feedback given: {error_feedback[:200]}...")
            
            return {
                "query": query,
                "success": success,
                "attempts": attempts,
                "had_retry": had_retry,
                "retry_reason": retry_reason,
                "duration": duration,
                "final_response": final_response
            }
        else:
            print(f"\n‚ùå HTTP Error: {response.status_code}")
            return {
                "query": query,
                "success": False,
                "error": f"HTTP {response.status_code}",
                "duration": duration
            }
            
    except Exception as e:
        print(f"\n‚ùå Exception: {str(e)}")
        return {
            "query": query,
            "success": False,
            "error": str(e),
            "duration": 0
        }


async def main():
    """Run all 20 tests"""
    print("üöÄ Testing 20 Most Challenging HR Analytics Queries")
    print(f"Time: {datetime.now()}")
    print("="*80)
    
    async with httpx.AsyncClient() as client:
        results = []
        
        for i, query in enumerate(CHALLENGING_QUERIES):
            result = await test_query(client, query, i)
            results.append(result)
            
            # Brief pause between queries
            if i < len(CHALLENGING_QUERIES) - 1:
                await asyncio.sleep(1)
    
    # Generate summary report
    print("\n" + "="*80)
    print("üìä FINAL SUMMARY")
    print("="*80)
    
    successful = [r for r in results if r['success']]
    failed = [r for r in results if not r['success']]
    with_retry = [r for r in results if r.get('had_retry')]
    
    print(f"\nTotal queries: {len(results)}")
    print(f"‚úÖ Successful: {len(successful)} ({len(successful)/len(results)*100:.1f}%)")
    print(f"‚ùå Failed: {len(failed)} ({len(failed)/len(results)*100:.1f}%)")
    print(f"üîÑ Required retry: {len(with_retry)} ({len(with_retry)/len(results)*100:.1f}%)")
    
    # Analyze retry patterns
    if with_retry:
        print(f"\nüîÑ Retry Patterns:")
        retry_categories = {
            'Invalid entity': 0,
            'Invalid field': 0,
            'Missing group_by': 0,
            'Multiple filters': 0,
            'Other': 0
        }
        
        for r in with_retry:
            reason = r.get('retry_reason', '')
            if 'Invalid entity' in reason:
                retry_categories['Invalid entity'] += 1
            elif 'Field' in reason and 'not valid' in reason:
                retry_categories['Invalid field'] += 1
            elif 'group_by' in reason:
                retry_categories['Missing group_by'] += 1
            elif 'filter' in reason and '[' in reason:
                retry_categories['Multiple filters'] += 1
            else:
                retry_categories['Other'] += 1
        
        for category, count in retry_categories.items():
            if count > 0:
                print(f"  - {category}: {count} times")
    
    # Show failed queries
    if failed:
        print(f"\n‚ùå Failed Queries:")
        for i, r in enumerate(failed):
            print(f"  {i+1}. {r['query'][:80]}...")
            if 'error' in r:
                print(f"     Error: {r['error']}")
    
    # Performance stats
    durations = [r['duration'] for r in results if 'duration' in r and r['duration'] > 0]
    if durations:
        print(f"\n‚è±Ô∏è  Performance Stats:")
        print(f"  - Average duration: {sum(durations)/len(durations):.2f}s")
        print(f"  - Min duration: {min(durations):.2f}s")
        print(f"  - Max duration: {max(durations):.2f}s")
        
        # Separate stats for queries with retry
        retry_durations = [r['duration'] for r in with_retry if 'duration' in r]
        if retry_durations:
            print(f"  - Average duration with retry: {sum(retry_durations)/len(retry_durations):.2f}s")
    
    # Save results
    with open('test_20_challenging_results.json', 'w', encoding='utf-8') as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ Detailed results saved to test_20_challenging_results.json")
    print(f"‚úÖ Test completed at {datetime.now()}")


if __name__ == "__main__":
    asyncio.run(main())