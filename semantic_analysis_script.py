#!/usr/bin/env python3
"""
Analyze semantic relevance of 20 random queries from test results
"""
import json
import random

# Load test results
with open('comprehensive_test_results.json', 'r', encoding='utf-8') as f:
    data = json.load(f)

# Get all queries
queries = [result['query'] for result in data['results']]

# Sample 20 random queries
random.seed(42)  # For reproducible results
sample_queries = random.sample(queries, 20)

print("üîç SEMANTIC RELEVANCE ANALYSIS")
print("=" * 60)
print("Analyzing 20 random queries for semantic relevance to recruitment systems:")
print()

# Categorize queries by semantic relevance
categories = {
    "üü¢ RECRUITMENT CORE": [],      # Direct recruitment process
    "üü° RECRUITMENT ADJACENT": [],  # Related to hiring but stretches boundaries  
    "üî¥ EMPLOYEE LIFECYCLE": [],    # Post-hire employee data (impossible)
    "‚ö™ AMBIGUOUS": []              # Could be interpreted either way
}

for i, query in enumerate(sample_queries, 1):
    print(f"{i:2d}. {query}")
    
    # Analyze semantic relevance
    query_lower = query.lower()
    
    # Core recruitment terms
    recruitment_terms = ["–∫–∞–Ω–¥–∏–¥–∞—Ç", "–≤–∞–∫–∞–Ω—Å–∏–∏", "–Ω–∞–π–º", "—Ä–µ–∫—Ä—É—Ç–µ—Ä", "–∏—Å—Ç–æ—á–Ω–∏–∫", "–∏–Ω—Ç–µ—Ä–≤—å—é", "–æ—Ñ—Ñ–µ—Ä", "—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ", "–æ—Ç–±–æ—Ä", "–≤–æ—Ä–æ–Ω–∫–∞", "–∫–æ–Ω–≤–µ—Ä—Å–∏—è"]
    
    # Employee lifecycle terms (post-hire)
    employee_terms = ["—É–≤–æ–ª–∏–ª–æ—Å—å", "—É–≤–æ–ª—å–Ω–µ–Ω–∏—è", "—Ç–µ–∫—É—á–µ—Å—Ç—å", "—Å—Ç–∞–∂ —Ä–∞–±–æ—Ç—ã", "—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", "–ø–æ–≤—ã—à–µ–Ω–∏—è", "–±–æ–Ω—É—Å—ã", "–æ–±—É—á–µ–Ω–∏–µ", "—Ç—Ä–µ–Ω–∏–Ω–≥–∏", "—Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ–ª—å—à–µ", "—Ä–∞–±–æ—Ç–∞–µ—Ç —É–¥–∞–ª–µ–Ω–Ω–æ", "–≥—Ä–∞—Ñ–∏–∫—É"]
    
    # Time/duration terms that could be ambiguous
    time_terms = ["–¥–Ω–µ–π", "–º–µ—Å—è—Ü", "–≥–æ–¥", "–≤—Ä–µ–º—è", "—Å—Ä–æ–∫"]
    
    if any(term in query_lower for term in ["–∫–∞–Ω–¥–∏–¥–∞—Ç", "–≤–∞–∫–∞–Ω—Å–∏–∏", "–Ω–∞–π–º", "—Ä–µ–∫—Ä—É—Ç–µ—Ä", "–∏—Å—Ç–æ—á–Ω–∏–∫", "–∏–Ω—Ç–µ—Ä–≤—å—é", "–æ—Ñ—Ñ–µ—Ä", "—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ", "–æ—Ç–±–æ—Ä", "–≤–æ—Ä–æ–Ω–∫–∞", "–∫–æ–Ω–≤–µ—Ä—Å–∏—è"]):
        if any(term in query_lower for term in employee_terms):
            categories["‚ö™ AMBIGUOUS"].append((i, query))
            print("   ‚ö™ AMBIGUOUS - Contains both recruitment and employee terms")
        else:
            categories["üü¢ RECRUITMENT CORE"].append((i, query))
            print("   üü¢ RECRUITMENT CORE - Direct recruitment process")
    elif any(term in query_lower for term in employee_terms):
        categories["üî¥ EMPLOYEE LIFECYCLE"].append((i, query))
        print("   üî¥ EMPLOYEE LIFECYCLE - Post-hire employee data")
    else:
        categories["üü° RECRUITMENT ADJACENT"].append((i, query))
        print("   üü° RECRUITMENT ADJACENT - Related but stretches boundaries")
    
    print()

# Summary
print("üìä SEMANTIC RELEVANCE SUMMARY")
print("=" * 60)

for category, queries in categories.items():
    count = len(queries)
    percentage = (count / 20) * 100
    print(f"{category}: {count}/20 ({percentage:4.1f}%)")

print()
print("üîç DETAILED ANALYSIS:")
print()

for category, query_list in categories.items():
    if query_list:
        print(f"{category}:")
        for num, query in query_list:
            print(f"  {num:2d}. {query}")
        print()

# Analysis conclusions
recruitment_core = len(categories["üü¢ RECRUITMENT CORE"])
recruitment_adjacent = len(categories["üü° RECRUITMENT ADJACENT"])
employee_lifecycle = len(categories["üî¥ EMPLOYEE LIFECYCLE"])
ambiguous = len(categories["‚ö™ AMBIGUOUS"])

total_recruitment_relevant = recruitment_core + recruitment_adjacent + ambiguous

print("üí° CONCLUSIONS:")
print(f"‚Ä¢ Pure recruitment queries: {recruitment_core}/20 ({recruitment_core/20*100:.1f}%)")
print(f"‚Ä¢ Recruitment-adjacent: {recruitment_adjacent}/20 ({recruitment_adjacent/20*100:.1f}%)")
print(f"‚Ä¢ Employee lifecycle (should be impossible): {employee_lifecycle}/20 ({employee_lifecycle/20*100:.1f}%)")
print(f"‚Ä¢ Ambiguous (could go either way): {ambiguous}/20 ({ambiguous/20*100:.1f}%)")
print()
print(f"‚Ä¢ Total recruitment-relevant: {total_recruitment_relevant}/20 ({total_recruitment_relevant/20*100:.1f}%)")
print(f"‚Ä¢ Queries that should trigger impossible response: {employee_lifecycle}/20 ({employee_lifecycle/20*100:.1f}%)")