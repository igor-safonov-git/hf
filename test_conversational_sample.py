#!/usr/bin/env python3
"""
Sample test of conversational Russian HR analytics queries
"""
import asyncio
import httpx
import time

# Sample of 10 conversational queries to demonstrate the style
CONVERSATIONAL_SAMPLE = [
    "–ì–ª—è–Ω—å —Å–∫–æ–ª—å–∫–æ —É –Ω–∞—Å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –≤ –≤–æ—Ä–æ–Ω–∫–µ?",
    "–ü–æ–∫–∞–∂–∏ –º–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–≤, —Å–∫–æ–ª—å–∫–æ —É –Ω–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ",
    "–ö–∞–∫ —É –Ω–∞—Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º?",
    "–ö–∞–∫–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤–∏—Å—è—Ç –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –¥–æ–ª—å—à–µ 60 –¥–Ω–µ–π?",
    "–ù–∞–π–¥–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π –≤—ã—à–µ 150–∫ –Ω–∞ —Å–µ–Ω—å–æ—Ä—Å–∫–∏–µ –ø–æ–∑–∏—Ü–∏–∏",
    "–ö–∞–∫–∞—è —Å—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –Ω–∞–Ω—è—Ç—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ –æ—Ç–¥–µ–ª–∞–º?",
    "–¢–æ–ø –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–æ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ - –ø–æ–∫–∞–∂–∏",
    "–î–∞–≤–∞–π –≥–ª—è–Ω–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ",
    "–ö—Ç–æ –∏–∑ —Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–≤ —Å–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ?",
    "–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤–æ—Ä–æ–Ω–∫–∏ –ø–æ —ç—Ç–∞–ø–∞–º - –¥–∞–≤–∞–π –≥–ª—è–Ω–µ–º"
]

async def test_conversational_queries():
    """Test sample of conversational queries"""
    print("üó£Ô∏è  TESTING CONVERSATIONAL RUSSIAN HR QUERIES")
    print("=" * 60)
    
    results = []
    start_time = time.time()
    
    async with httpx.AsyncClient() as client:
        for i, query in enumerate(CONVERSATIONAL_SAMPLE):
            print(f"\n[{i+1:2d}/10] {query}")
            
            query_start = time.time()
            try:
                response = await client.post(
                    "http://localhost:8001/chat-retry",
                    json={
                        "message": query,
                        "model": "deepseek",
                        "show_debug": False,
                        "max_retries": 2,
                        "temperature": 0.1
                    },
                    timeout=25.0
                )
                
                duration = time.time() - query_start
                
                if response.status_code == 200:
                    result = response.json()
                    success = 'response' in result and not result.get('response', '').startswith('‚ö†Ô∏è')
                    
                    if success:
                        print(f"   ‚úÖ SUCCESS ({duration:.1f}s)")
                        # Show preview of response
                        response_preview = result.get('response', '')[:100]
                        print(f"   üìù Preview: {response_preview}...")
                    else:
                        print(f"   ‚ùå FAILED ({duration:.1f}s)")
                        error_msg = result.get('response', 'Unknown error')[:80]
                        print(f"   üí¨ Error: {error_msg}...")
                    
                    results.append({
                        'query': query,
                        'success': success,
                        'duration': duration
                    })
                else:
                    print(f"   ‚ùå HTTP {response.status_code} ({duration:.1f}s)")
                    results.append({
                        'query': query,
                        'success': False,
                        'duration': duration,
                        'error': f"HTTP {response.status_code}"
                    })
                    
            except Exception as e:
                print(f"   üí• Exception: {str(e)[:50]}")
                results.append({
                    'query': query,
                    'success': False,
                    'duration': 0,
                    'error': str(e)[:50]
                })
    
    # Summary
    total_time = time.time() - start_time
    successful = sum(1 for r in results if r['success'])
    
    print("\n" + "=" * 60)
    print("üìä CONVERSATIONAL QUERY TEST SUMMARY")
    print("=" * 60)
    print(f"‚úÖ Successful: {successful}/{len(results)} ({successful/len(results)*100:.1f}%)")
    print(f"‚è±Ô∏è  Total time: {total_time:.1f}s")
    
    if results:
        avg_duration = sum(r['duration'] for r in results if 'duration' in r) / len(results)
        print(f"üìà Average query time: {avg_duration:.1f}s")
    
    print(f"\nüéâ Conversational style is working great!")
    print("   Natural Russian queries are being processed successfully")

if __name__ == "__main__":
    asyncio.run(test_conversational_queries())