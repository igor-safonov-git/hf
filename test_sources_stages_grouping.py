#!/usr/bin/env python3
"""
Test sources and stages grouping functionality
Phase 5.5: Test with sources grouping and stages grouping to ensure generic grouping logic works
"""

import asyncio
import json
from chart_data_processor import process_chart_data, validate_report_json
from huntflow_local_client import HuntflowLocalClient

# Test report with sources grouping
sources_grouped_report = {
    "report_title": "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤",
    "period": "6 month",
    "metrics_group_by": "sources", 
    "main_metric": {
        "label": "–ù–∞–Ω—è—Ç–æ —á–µ—Ä–µ–∑ –∏—Å—Ç–æ—á–Ω–∏–∫",
        "value": {
            "operation": "count",
            "entity": "hires", 
            "value_field": None,
            "filters": {
                "period": "6 month"
            }
        }
    },
    "secondary_metrics": [
        {
            "label": "–ö–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ –∏—Å—Ç–æ—á–Ω–∏–∫",
            "value": {
                "operation": "count",
                "entity": "applicants",
                "value_field": None,
                "filters": {
                    "period": "6 month"
                }
            }
        },
        {
            "label": "–ö–æ–Ω–≤–µ—Ä—Å–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞",
            "value": {
                "operation": "avg",
                "entity": "sources",
                "value_field": "conversion",
                "filters": {
                    "period": "6 month"
                }
            }
        }
    ],
    "chart": {
        "label": "–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤",
        "type": "bar",
        "x_label": "–ò—Å—Ç–æ—á–Ω–∏–∫–∏",
        "y_label": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤",
        "x_axis": {
            "operation": "count",
            "entity": "applicants",
            "value_field": None,
            "group_by": {"field": "sources"},
            "filters": {
                "period": "6 month"
            }
        },
        "y_axis": {
            "operation": "count", 
            "entity": "applicants",
            "value_field": None,
            "group_by": {"field": "sources"},
            "filters": {
                "period": "6 month"
            }
        }
    }
}

# Test report with stages grouping
stages_grouped_report = {
    "report_title": "–ê–Ω–∞–ª–∏–∑ –≤–æ—Ä–æ–Ω–∫–∏ –ø–æ —ç—Ç–∞–ø–∞–º",
    "period": "3 month",
    "metrics_group_by": "stages", 
    "main_metric": {
        "label": "–ö–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ —ç—Ç–∞–ø–µ",
        "value": {
            "operation": "count",
            "entity": "applicants", 
            "value_field": None,
            "filters": {
                "period": "3 month"
            }
        }
    },
    "secondary_metrics": [
        {
            "label": "–ù–∞–Ω—è—Ç–æ —Å —ç—Ç–∞–ø–∞",
            "value": {
                "operation": "count",
                "entity": "hires",
                "value_field": None,
                "filters": {
                    "period": "3 month"
                }
            }
        },
        {
            "label": "–ö–æ–Ω–≤–µ—Ä—Å–∏—è —ç—Ç–∞–ø–∞",
            "value": {
                "operation": "avg",
                "entity": "stages",
                "value_field": "conversion",
                "filters": {
                    "period": "3 month"
                }
            }
        }
    ],
    "chart": {
        "label": "–î–∏–Ω–∞–º–∏–∫–∞ –Ω–∞–π–º–∞ –ø–æ –º–µ—Å—è—Ü–∞–º",
        "type": "line",
        "x_label": "–ú–µ—Å—è—Ü",
        "y_label": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–º–∞",
        "x_axis": {
            "operation": "count",
            "entity": "hires",
            "value_field": None,
            "group_by": {"field": "month"},
            "filters": {
                "period": "3 month"
            }
        },
        "y_axis": {
            "operation": "count", 
            "entity": "hires",
            "value_field": None,
            "group_by": {"field": "month"},
            "filters": {
                "period": "3 month"
            }
        }
    }
}

async def test_sources_grouping():
    """Test sources grouping functionality"""
    print("üéØ Testing Sources Grouping...")
    
    try:
        # Validate schema
        print("üìã Validating sources grouping schema...")
        validated = validate_report_json(sources_grouped_report)
        print("‚úÖ Schema validation: PASSED")
        
        # Process with client
        print("‚öôÔ∏è  Processing sources grouping report...")
        client = HuntflowLocalClient()
        processed = await process_chart_data(sources_grouped_report.copy(), client)
        
        print("‚úÖ Processing completed: PASSED")
        
        # Check structure
        print("üìä Checking sources grouped data structure...")
        
        assert processed.get("metrics_group_by") == "sources", "metrics_group_by should be 'sources'"
        print("‚úÖ metrics_group_by field: CORRECT")
        
        # Check main metric breakdown
        main_metric = processed.get("main_metric", {})
        if main_metric.get("grouped_breakdown"):
            breakdown = main_metric["grouped_breakdown"]
            print(f"‚úÖ Sources breakdown found: {len(breakdown)} sources")
            print(f"   Sample sources: {list(breakdown.keys())[:3]}...")
            print(f"   Total hires from sources: {main_metric.get('total_value', 0)}")
        else:
            print("‚ÑπÔ∏è  Sources breakdown: EMPTY (no data available)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Sources grouping test FAILED: {e}")
        return False

async def test_stages_grouping():
    """Test stages grouping functionality"""
    print("\nüéØ Testing Stages Grouping...")
    
    try:
        # Validate schema
        print("üìã Validating stages grouping schema...")
        validated = validate_report_json(stages_grouped_report)
        print("‚úÖ Schema validation: PASSED")
        
        # Process with client
        print("‚öôÔ∏è  Processing stages grouping report...")
        client = HuntflowLocalClient()
        processed = await process_chart_data(stages_grouped_report.copy(), client)
        
        print("‚úÖ Processing completed: PASSED")
        
        # Check structure
        print("üìä Checking stages grouped data structure...")
        
        assert processed.get("metrics_group_by") == "stages", "metrics_group_by should be 'stages'"
        print("‚úÖ metrics_group_by field: CORRECT")
        
        # Check main metric breakdown
        main_metric = processed.get("main_metric", {})
        if main_metric.get("grouped_breakdown"):
            breakdown = main_metric["grouped_breakdown"]
            print(f"‚úÖ Stages breakdown found: {len(breakdown)} stages")
            print(f"   Pipeline stages: {list(breakdown.keys())}")
            print(f"   Total applicants in pipeline: {main_metric.get('total_value', 0)}")
        else:
            print("‚ÑπÔ∏è  Stages breakdown: EMPTY (no data available)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Stages grouping test FAILED: {e}")
        return False

async def test_generic_grouping_logic():
    """Test that grouping logic works generically for different entity types"""
    print("\nüîß Testing Generic Grouping Logic...")
    
    try:
        client = HuntflowLocalClient()
        
        # Process both reports
        sources_result = await process_chart_data(sources_grouped_report.copy(), client)
        stages_result = await process_chart_data(stages_grouped_report.copy(), client)
        
        # Check that both have consistent structure
        for name, result in [("Sources", sources_result), ("Stages", stages_result)]:
            print(f"\nüìã Checking {name} result structure:")
            
            # Should always have these fields
            assert "metrics_group_by" in result, f"{name}: Missing metrics_group_by"
            assert "main_metric" in result, f"{name}: Missing main_metric"
            assert "secondary_metrics" in result, f"{name}: Missing secondary_metrics"
            
            main_metric = result["main_metric"]
            assert "real_value" in main_metric, f"{name}: Missing real_value"
            assert "total_value" in main_metric, f"{name}: Missing total_value"
            
            # Secondary metrics should have same structure
            for i, sec_metric in enumerate(result.get("secondary_metrics", [])):
                assert "real_value" in sec_metric, f"{name}: Secondary {i} missing real_value"
                assert "total_value" in sec_metric, f"{name}: Secondary {i} missing total_value"
            
            print(f"‚úÖ {name}: Consistent structure verified")
        
        print("\nüéâ Generic grouping logic test COMPLETED successfully!")
        return True
        
    except Exception as e:
        print(f"‚ùå Generic grouping logic test FAILED: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    async def main():
        print("üöÄ Starting Sources & Stages Grouping Tests\n")
        
        sources_success = await test_sources_grouping()
        stages_success = await test_stages_grouping()
        generic_success = await test_generic_grouping_logic()
        
        if sources_success and stages_success and generic_success:
            print("\n‚úÖ ALL GROUPING TESTS PASSED!")
            exit(0)
        else:
            print("\n‚ùå SOME GROUPING TESTS FAILED!")
            exit(1)
    
    asyncio.run(main())